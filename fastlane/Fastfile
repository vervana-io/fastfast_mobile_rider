# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

lane :prepare do |options|
 if ENV["BITRISEIO_ANDROID_KEYSTORE_URL"]
   ENV["ANDROID_RELEASE_STORE_FILE"] = Dir.pwd + "/release.keystore"
   sh("curl", ENV["BITRISEIO_ANDROID_KEYSTORE_URL"], "-o", ENV["ANDROID_RELEASE_STORE_FILE"])
 end
 if ENV["BITRISEIO_ANDROID_KEYSTORE_PASSWORD"]
   ENV["ANDROID_RELEASE_STORE_PASSWORD"] = ENV["BITRISEIO_ANDROID_KEYSTORE_PASSWORD"]
 end
 if ENV["BITRISEIO_ANDROID_KEYSTORE_ALIAS"]
   ENV["ANDROID_RELEASE_KEY_ALIAS"] = ENV["BITRISEIO_ANDROID_KEYSTORE_ALIAS"]
 end
 if ENV["BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD"]
   ENV["ANDROID_RELEASE_KEY_PASSWORD"] = ENV["BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD"]
 end
 if ENV["BITRISEIO_SUPPLY_JSON_KEY_URL"]
   ENV["SUPPLY_JSON_KEY"] = Dir.pwd + "/supply.json"
   sh("curl", ENV["BITRISEIO_SUPPLY_JSON_KEY_URL"], "-o", ENV["SUPPLY_JSON_KEY"])
 end
 if ENV["BITRISEIO_FIREBASE_SERVICE_ACCOUNT_JSON_URL"]
   ENV["FIREBASE_SERVICE_ACCOUNT"] = Dir.pwd + "/firebase.json"
   sh("curl", ENV["BITRISEIO_FIREBASE_SERVICE_ACCOUNT_JSON_URL"], "-o", ENV["FIREBASE_SERVICE_ACCOUNT"])
 end

 if ENV["BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL"]
   ENV["GOOGLE_PLAY_JSON_KEY"] = Dir.pwd + "/service-account.json"
   sh("curl", ENV["BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL"], "-o", ENV["GOOGLE_PLAY_JSON_KEY"])
 end

 if ENV["BITRISE_BUILD_NUMBER"]
   ENV["BUILD_NUMBER"] = ENV["BITRISE_BUILD_NUMBER"]
 end
end

lane :copy_env do |options|
  env_url = ENV["BITRISEIO_#{options[:stage]}_ENV_URL"]
  dot_env_file = File.join(Dir.pwd, ".env")
  destination_path = File.expand_path("../.env", Dir.pwd)

  sh("curl", env_url, "-o", dot_env_file)
  sh("mv", dot_env_file, destination_path)

  # # Firebase Configuration files
  # # IOS 
  plist_url = ENV["BITRISEIO_FIREBASE_IOS_PLIST_#{options[:stage]}_URL"]
  plist_file = File.join(Dir.pwd, "info.plist")

  sh("curl", plist_url, "-o", plist_file)
  sh("mv", plist_file, File.expand_path("../ios/GoogleService-Info.plist", Dir.pwd))

  # IOS Replace Google reversed client id for current application
  reversed_client_id = ENV["REVERSED_CLIENT_ID_#{options[:stage]}"]
  sh "sed -i '' \"s|<string>com\\.googleusercontent\\.apps\\.[^<]*</string>|<string>#{reversed_client_id}</string>|g\" ../ios/FastFastRider/Info.plist"
  
end


platform :ios do
 before_all do |lane, options|
   prepare
   ensure_env_vars(
     env_vars: [
       "KEYCHAIN_PASSWORD",
       "MATCH_PASSWORD",
       "APPLE_EMAIL_ADDRESS",
       "APP_STORE_CONNECT_TEAM_ID",
       "APPLE_DEVELOPER_PORTAL_TEAM_ID",
       "BUILD_NUMBER",
     ]
   )
   clear_derived_data
   create_keychain(
     name: "ci",
     password: ENV["KEYCHAIN_PASSWORD"],
     unlock: true,
     timeout: 3600,
   )
   match(
     type: "appstore",
     readonly: true,
     app_identifier: ["org.fastfastrider", "org.fastfastrider.develop"],
     keychain_name: "ci",
     keychain_password: ENV["KEYCHAIN_PASSWORD"],
   )
   cocoapods(
     "podfile": "ios/",
     clean_install: true,
     try_repo_update_on_error: true
   )
   increment_build_number(build_number: ENV["BUILD_NUMBER"], xcodeproj: "ios/FastFastRider.xcodeproj")
 end

 lane :dev do
   ensure_env_vars(
     env_vars: [
      "DEV_APP_ID",
      "REVERSED_CLIENT_ID_DEV"
     ]
   )
   copy_env("stage": "DEV")
   build_ios_app(
     workspace: "ios/FastFastRider.xcworkspace",
     scheme: "FastFastRider develop",
     suppress_xcode_output: false,
     clean: true, 
   )
   upload_to_testflight(apple_id: ENV["DEV_APP_ID"], skip_waiting_for_build_processing: true)
 end

 lane :main do
   ensure_env_vars(
     env_vars: [
      "PRODUCTION_APP_ID",
      "REVERSED_CLIENT_ID_MAIN"
     ]
   )
   copy_env("stage": "MAIN")
   build_ios_app(
     workspace: "ios/FastFastRider.xcworkspace",
     scheme: "FastFastRider",
     suppress_xcode_output: false,
     clean: true
   )
   upload_to_testflight(apple_id: ENV["PRODUCTION_APP_ID"], skip_waiting_for_build_processing: true)
 end
end

platform :android do
 before_all do |lane, options|
   prepare
   ensure_env_vars(
     env_vars: [
       "ANDROID_RELEASE_STORE_FILE",
       "ANDROID_RELEASE_STORE_PASSWORD",
       "ANDROID_RELEASE_KEY_ALIAS",
       "ANDROID_RELEASE_KEY_PASSWORD",
       "GOOGLE_PLAY_JSON_KEY",
       "BUILD_NUMBER"
     ]
   )
   increment_version_code(
     gradle_file_path: "./android/app/build.gradle",
     version_code: ENV["BUILD_NUMBER"]
   )
 end

 lane :dev do
   copy_env("stage": "DEV")
   ensure_env_vars(
    env_vars: [
     "FIREBASE_SERVICE_ACCOUNT", 
     "FIREBASE_DISTRIBUTION_APP_ID"
    ]
   )
   gradle(
     "project_dir": "android",
     "task": "clean bundle",
     "build_type": "Release",
     "properties": {
       "android.injected.signing.store.file" => ENV["ANDROID_RELEASE_STORE_FILE"],
       "android.injected.signing.store.password" => ENV["ANDROID_RELEASE_STORE_PASSWORD"],
       "android.injected.signing.key.alias" => ENV["ANDROID_RELEASE_KEY_ALIAS"],
       "android.injected.signing.key.password" => ENV["ANDROID_RELEASE_KEY_PASSWORD"],
       "android.injected.version.code" => ENV["BUILD_NUMBER"]
     })

   upload_to_play_store(
    track: "internal", 
    json_key: ENV["GOOGLE_PLAY_JSON_KEY"], 
    release_status: "draft",
    track_promote_to: "internal"
   )
 end

 lane :main do
   copy_env("stage": "MAIN")
   gradle(
     "project_dir": "android",
     "task": "clean bundle",
     "build_type": "Release",
     "properties": {
       "android.injected.signing.store.file" => ENV["ANDROID_RELEASE_STORE_FILE"],
       "android.injected.signing.store.password" => ENV["ANDROID_RELEASE_STORE_PASSWORD"],
       "android.injected.signing.key.alias" => ENV["ANDROID_RELEASE_KEY_ALIAS"],
       "android.injected.signing.key.password" => ENV["ANDROID_RELEASE_KEY_PASSWORD"],
       "android.injected.version.code" => ENV["BUILD_NUMBER"]
     })
   upload_to_play_store(track: "alpha", 
    json_key: ENV["GOOGLE_PLAY_JSON_KEY"], 
    release_status: "draft",
    track_promote_to: "alpha"
   )
 end
end

lane :ios_clean do
 delete_keychain(name: "ci")
 sh(command: "rm -vfr ~/Library/Developer/Xcode/Archives/*")
end